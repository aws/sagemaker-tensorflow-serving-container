FROM ubuntu:16.04
LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

ARG TFS_SHORT_VERSION=1.14
ARG TFS_VERSION=1-14-0
ARG TFS_EI_VERSION=1-2
ARG PYTHON=python3
ARG PIP=pip3
ARG PYTHON_VERSION=3.6.6
ARG HEALTH_CHECK_VERSION=1.3.3

# nginx + njs
RUN apt-get update && \
    apt-get -y install --no-install-recommends \
    curl \
    gnupg2 \
    ca-certificates \
    git \
    wget \
    vim \
    build-essential \
    zlib1g-dev && \
    curl -s http://nginx.org/keys/nginx_signing.key | apt-key add - && \
    echo 'deb http://nginx.org/packages/ubuntu/ xenial nginx' >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get -y install --no-install-recommends nginx wget nginx-module-njs  && \
    apt-get clean 

# See http://bugs.python.org/issue19846
ENV LANG C.UTF-8

RUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz && \
    tar -xvf Python-$PYTHON_VERSION.tgz && cd Python-$PYTHON_VERSION && \
    ./configure && make && make install && \
    apt-get update && apt-get install -y --no-install-recommends libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev && \
    make && make install && rm -rf ../Python-$PYTHON_VERSION* && \
    ln -s /usr/local/bin/pip3 /usr/bin/pip

# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1

COPY sagemaker /sagemaker

RUN wget https://amazonei-healthcheck.s3.amazonaws.com/v${HEALTH_CHECK_VERSION}/ei_health_check_${HEALTH_CHECK_VERSION}.tar.gz -O /opt/ei_health_check_${HEALTH_CHECK_VERSION}.tar.gz \
    && tar -xvf /opt/ei_health_check_${HEALTH_CHECK_VERSION}.tar.gz -C /opt/ \
    && rm -rf /opt/ei_health_check_${HEALTH_CHECK_VERSION}.tar.gz \
    && chmod a+x /opt/ei_health_check/bin/health_check

RUN ${PIP} --no-cache-dir install  --upgrade pip setuptools cython falcon gunicorn gevent requests

# Some TF tools expect a "python" binary
RUN ln -s $(which ${PYTHON}) /usr/local/bin/python &&\
    ${PIP} install -U --no-cache-dir docutils==0.14 awscli==1.16.196

# Expose ports
# gRPC
EXPOSE 8500

# REST
EXPOSE 8501

RUN wget https://amazonei-tensorflow.s3.amazonaws.com/tensorflow-serving/v1.14/ubuntu/archive/tensorflow-serving-${TFS_VERSION}-ubuntu-ei-${TFS_EI_VERSION}.tar.gz \
            -O /tmp/tensorflow-serving-${TFS_VERSION}-ubuntu-ei-${TFS_EI_VERSION}.tar.gz && \
    cd /tmp && \
    tar zxf tensorflow-serving-${TFS_VERSION}-ubuntu-ei-${TFS_EI_VERSION}.tar.gz && \
    mv tensorflow-serving-${TFS_VERSION}-ubuntu-ei-${TFS_EI_VERSION}/amazonei_tensorflow_model_server /usr/bin/tensorflow_model_server && \
    chmod +x /usr/bin/tensorflow_model_server && \
    rm -rf tensorflow-serving-${TFS_VERSION}*

# Set where models should be stored in the container
ENV MODEL_BASE_PATH=/models
RUN mkdir -p ${MODEL_BASE_PATH}

# The only required piece is the model name in order to differentiate endpoints
ENV MODEL_NAME=model

ENV SAGEMAKER_TFS_VERSION "${TFS_SHORT_VERSION}"
ENV PATH "$PATH:/sagemaker"

RUN echo '#!/bin/bash \n\n\
/usr/bin/tensorflow_model_server --port=8500 --rest_api_port=8501 \
--model_name=${MODEL_NAME} --model_base_path=${MODEL_BASE_PATH}/${MODEL_NAME} \
"$@"' > /usr/bin/tf_serving_entrypoint.sh \
&& chmod +x /usr/bin/tf_serving_entrypoint.sh

CMD ["/usr/bin/tf_serving_entrypoint.sh"]
